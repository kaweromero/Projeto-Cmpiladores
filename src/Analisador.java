/* Generated By:JJTree&JavaCC: Do not edit this line. Analisador.java */
public class Analisador/*@bgen(jjtree)*/implements AnalisadorTreeConstants, AnalisadorConstants {/*@bgen(jjtree)*/
  protected static JJTAnalisadorState jjtree = new JJTAnalisadorState();public static void main(String args[]) throws ParseException {

        }

  static final public SimpleNode processa() throws ParseException {
                          /*@bgen(jjtree) processa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCESSA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      goal();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void goal() throws ParseException {
               /*@bgen(jjtree) goal */
  SimpleNode jjtn000 = new SimpleNode(JJTGOAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      mainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Classe:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        classDeclaration();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void mainClass() throws ParseException {
                    /*@bgen(jjtree) mainClass */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Classe);
      jj_consume_token(Identifier);
      jj_consume_token(AbreChaves);
      jj_consume_token(Public);
      jj_consume_token(Static);
      jj_consume_token(Void);
      jj_consume_token(Main);
      jj_consume_token(AbreParentesis);
      jj_consume_token(String);
      jj_consume_token(AbreColchete);
      jj_consume_token(FechaColchete);
      jj_consume_token(Identifier);
      jj_consume_token(FechaParentesis);
      jj_consume_token(AbreChaves);
      statement();
      jj_consume_token(FechaChaves);
      jj_consume_token(FechaChaves);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void classDeclaration() throws ParseException {
                            /*@bgen(jjtree) classDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Classe);
      jj_consume_token(Identifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Extends:
        jj_consume_token(Extends);
        jj_consume_token(Identifier);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(AbreChaves);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Int:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        varDeclaration();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Public:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        methodDeclaration();
      }
      jj_consume_token(FechaChaves);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void varDeclaration() throws ParseException {
                         /*@bgen(jjtree) varDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      jj_consume_token(Identifier);
      jj_consume_token(ponto_virg);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void methodDeclaration() throws ParseException {
                            /*@bgen(jjtree) methodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Public);
      type();
      jj_consume_token(Identifier);
      jj_consume_token(AbreParentesis);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Int:
        type();
        jj_consume_token(Identifier);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Virgula:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(Virgula);
          type();
          jj_consume_token(Identifier);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(FechaParentesis);
      jj_consume_token(AbreChaves);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Int:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        varDeclaration();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case If:
        case While:
        case Syso:
        case AbreChaves:
        case Identifier:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        statement();
      }
      jj_consume_token(Return);
      expression();
      jj_consume_token(ponto_virg);
      jj_consume_token(FechaChaves);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void type() throws ParseException {
               /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Int);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AbreColchete:
        jj_consume_token(AbreColchete);
        jj_consume_token(FechaColchete);
        break;
      case Boolean:
        jj_consume_token(Boolean);
        break;
      case Int:
        jj_consume_token(Int);
        break;
      case Identifier:
        jj_consume_token(Identifier);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void statement() throws ParseException {
                    /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AbreChaves:
        jj_consume_token(AbreChaves);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case If:
          case While:
          case Syso:
          case AbreChaves:
          case Identifier:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_7;
          }
          statement();
        }
        jj_consume_token(FechaChaves);
        break;
      case If:
        jj_consume_token(If);
        jj_consume_token(AbreParentesis);
        expression();
        jj_consume_token(FechaParentesis);
        statement();
        jj_consume_token(Else);
        statement();
        break;
      case While:
        jj_consume_token(While);
        jj_consume_token(AbreParentesis);
        expression();
        jj_consume_token(FechaParentesis);
        statement();
        break;
      case Syso:
        jj_consume_token(Syso);
        jj_consume_token(AbreParentesis);
        expression();
        jj_consume_token(FechaParentesis);
        jj_consume_token(ponto_virg);
        break;
      case Identifier:
        jj_consume_token(Identifier);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Equal:
          jj_consume_token(Equal);
          expression();
          jj_consume_token(ponto_virg);
          break;
        case AbreColchete:
          jj_consume_token(AbreColchete);
          expression();
          jj_consume_token(FechaColchete);
          jj_consume_token(Equal);
          expression();
          jj_consume_token(ponto_virg);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expression() throws ParseException {
                     /*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OperadorLogico:
      case Menor:
      case OperadorMatematico:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OperadorLogico:
          jj_consume_token(OperadorLogico);
          break;
        case Menor:
          jj_consume_token(Menor);
          break;
        case OperadorMatematico:
          jj_consume_token(OperadorMatematico);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression1();
        break;
      case AbreColchete:
        jj_consume_token(AbreColchete);
        expression1();
        jj_consume_token(FechaColchete);
        break;
      case Ponto:
        jj_consume_token(Ponto);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Length:
          jj_consume_token(Length);
          break;
        case Identifier:
          jj_consume_token(Identifier);
          jj_consume_token(AbreParentesis);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case True:
          case False:
          case This:
          case New:
          case AbreParentesis:
          case Identifier:
          case INTEGER_LITERAL:
          case Negacao:
            expression1();
            label_8:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case Virgula:
                ;
                break;
              default:
                jj_la1[13] = jj_gen;
                break label_8;
              }
              jj_consume_token(Virgula);
              expression1();
            }
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          jj_consume_token(FechaParentesis);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expression1() throws ParseException {
                      /*@bgen(jjtree) expression1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        expression();
        break;
      case True:
        jj_consume_token(True);
        expression();
        break;
      case False:
        jj_consume_token(False);
        expression();
        break;
      case Identifier:
        jj_consume_token(Identifier);
        expression();
        break;
      case This:
        jj_consume_token(This);
        expression();
        break;
      case New:
        jj_consume_token(New);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Int:
          jj_consume_token(Int);
          jj_consume_token(AbreColchete);
          expression1();
          jj_consume_token(FechaColchete);
          expression();
          break;
        case Identifier:
          jj_consume_token(Identifier);
          jj_consume_token(AbreParentesis);
          jj_consume_token(FechaParentesis);
          expression();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case Negacao:
        jj_consume_token(Negacao);
        expression1();
        expression();
        break;
      case AbreParentesis:
        jj_consume_token(AbreParentesis);
        expression();
        jj_consume_token(FechaParentesis);
        expression();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void identifier() throws ParseException {
                     /*@bgen(jjtree) identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Identifier);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalisadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x400,0x40000,0x800,0x0,0x40000,0x40000,0xd00000,0x40042000,0xd00000,0x42000000,0xd00000,0xd000000,0x0,0x100b8000,0x4000,0x4d000000,0x40000,0x100b8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x5,0x4,0x5,0x0,0x5,0x0,0x80,0x114,0x4,0x40,0x4,0x114,};
   }

  /** Constructor with InputStream. */
  public Analisador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisador(AnalisadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
