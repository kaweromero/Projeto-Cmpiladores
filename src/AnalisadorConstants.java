/* Generated By:JJTree&JavaCC: Do not edit this line. AnalisadorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalisadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int String = 5;
  /** RegularExpression Id. */
  int Main = 6;
  /** RegularExpression Id. */
  int Void = 7;
  /** RegularExpression Id. */
  int Static = 8;
  /** RegularExpression Id. */
  int Classe = 9;
  /** RegularExpression Id. */
  int Extends = 10;
  /** RegularExpression Id. */
  int Public = 11;
  /** RegularExpression Id. */
  int Return = 12;
  /** RegularExpression Id. */
  int Boolean = 13;
  /** RegularExpression Id. */
  int Length = 14;
  /** RegularExpression Id. */
  int True = 15;
  /** RegularExpression Id. */
  int False = 16;
  /** RegularExpression Id. */
  int This = 17;
  /** RegularExpression Id. */
  int Int = 18;
  /** RegularExpression Id. */
  int New = 19;
  /** RegularExpression Id. */
  int If = 20;
  /** RegularExpression Id. */
  int Else = 21;
  /** RegularExpression Id. */
  int While = 22;
  /** RegularExpression Id. */
  int Syso = 23;
  /** RegularExpression Id. */
  int OperadorLogico = 24;
  /** RegularExpression Id. */
  int Equal = 25;
  /** RegularExpression Id. */
  int Menor = 26;
  /** RegularExpression Id. */
  int OperadorMatematico = 27;
  /** RegularExpression Id. */
  int AbreParentesis = 28;
  /** RegularExpression Id. */
  int FechaParentesis = 29;
  /** RegularExpression Id. */
  int AbreColchete = 30;
  /** RegularExpression Id. */
  int FechaColchete = 31;
  /** RegularExpression Id. */
  int AbreChaves = 32;
  /** RegularExpression Id. */
  int FechaChaves = 33;
  /** RegularExpression Id. */
  int Identifier = 34;
  /** RegularExpression Id. */
  int LETTERS = 35;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 36;
  /** RegularExpression Id. */
  int ponto_virg = 37;
  /** RegularExpression Id. */
  int Ponto = 38;
  /** RegularExpression Id. */
  int Virgula = 39;
  /** RegularExpression Id. */
  int Negacao = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"String\"",
    "\"main\"",
    "\"void\"",
    "\"static\"",
    "\"class\"",
    "\"extends\"",
    "\"public\"",
    "\"return\"",
    "\"boolean\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"int\"",
    "\"new\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"System.out.println\"",
    "\"&&\"",
    "\"=\"",
    "\"<\"",
    "<OperadorMatematico>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "<Identifier>",
    "<LETTERS>",
    "<INTEGER_LITERAL>",
    "\";\"",
    "\".\"",
    "\",\"",
    "\"!\"",
  };

}
